// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  @@map("users")      // Name of the DB table
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  password  String
  isDeleted Boolean   @default(false)
}

model RoomType { 
  @@map("roomType")      // Name of the DB table
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  isVisible Boolean   @default(true)
  Rooms     Room[]
}

model Room {
  @@map("room")      // Name of the DB table
  id          Int       @id @default(autoincrement())
  roomTypeId  Int
  number      Int
  isVisible   Boolean   @default(true)
  RoomType    RoomType  @relation(fields: [roomTypeId], references: [id])
  Seats       RoomSeats[]
  Shows       Show[]
}

model RoomSeats {
  @@map("roomSeats")      // Name of the DB table
  roomId          Int
  id              Int       @default(autoincrement())
  numberX         Int
  numberY         Int
  enabled         Boolean   @default(true)
  RoomType        Room      @relation(fields: [roomId], references: [id])
  Reserved        ReservedSeats[]
  PreReserved     PreReservedSeats[]
  @@id([roomId, id])
}

model Movie {
  @@map("movie")      // Name of the DB table
  id          Int       @id @default(autoincrement())
  name        String
  description String
  type        String
  rate        String
  duration    Int
  synopsis    String
  trailerUrl  String
  isVisible   Boolean   @default(true)
  Languages   MovieLanguages[]
}

model MovieLanguages {
  @@map("movieLanguages")      // Name of the DB table
  movieId     Int
  language    String
  isVisible   Boolean   @default(true)
  Movie       Movie     @relation(fields: [movieId], references: [id])
  Shows       Show[]
  @@id([movieId, language])
}


model Show {
  @@map("show")      // Name of the DB table
  id                  Int                 @id @default(autoincrement())
  roomId              Int
  movieId             Int
  language            String
  dateTime            DateTime
  Movie               MovieLanguages      @relation(fields: [movieId, language], references: [movieId, language])
  Room                Room                @relation(fields: [roomId], references: [id])
  Reservations        Reservation[]
  PreReservations     PreReservation[]
}


model Reservation {
  @@map("reservation")      // Name of the DB table
  id                    Int                @id @default(autoincrement())
  showId                Int
  clientName            String
  clientEmail           String
  clientPhone           String
  createdAt             DateTime          @default(now())
  paidAt                DateTime?
  Show                  Show              @relation(fields: [showId], references: [id])
  Seats                 ReservedSeats[]
  MercadoPagoPayment    MercadoPagoPayment?
}

model ReservedSeats {
  @@map("reservationSeats")
  reservationId   Int
  roomId          Int
  seatId          Int
  Reservation     Reservation       @relation(fields: [reservationId], references: [id])
  Seat            RoomSeats         @relation(fields: [roomId, seatId], references: [roomId, id])
  @@id([reservationId, roomId, seatId])
}

model PreReservation {
  @@map("prePeservation")           // Name of the DB table
  id                    Int                 @id @default(autoincrement())
  showId                Int
  clientName            String
  clientEmail           String
  clientPhone           String
  createdAt             DateTime            @default(now())
  expiresAt             DateTime
  Show                  Show                @relation(fields: [showId], references: [id])
  Seats                 PreReservedSeats[]
  MercadoPagoPayment    MercadoPagoPayment?
}

model PreReservedSeats {
  @@map("preReservationSeats")
  preReservationId   Int
  roomId             Int
  seatId             Int
  Reservation        PreReservation       @relation(fields: [preReservationId], references: [id])
  Seat               RoomSeats         @relation(fields: [roomId, seatId], references: [roomId, id])
  @@id([preReservationId, roomId, seatId])
}

model MercadoPagoPayment {
 @@map("mercadoPagoPayment")
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  total             Float
  preferenceId      String
  preReservationId  Int?
  reservationId     Int?
  PreReservation    PreReservation?      @relation(fields: [preReservationId], references: [id])
  Reservation       Reservation?      @relation(fields: [reservationId], references: [id])
}
